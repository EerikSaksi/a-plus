# Generated by Django 2.2.20 on 2021-05-25 11:10

from django.db import migrations, models

from course.models import Enrollment


def update_enrollments(apps, schema_editor):
    Enrollment.objects.all().update(
        role=Enrollment.ENROLLMENT_ROLE.STUDENT,
        status=Enrollment.ENROLLMENT_STATUS.ACTIVE
    )


def create_assistant_enrollments(apps, schema_editor):
    CourseInstance = apps.get_model('course', 'CourseInstance')
    for instance in CourseInstance.objects.prefetch_related('assistants'):
        for assistant in instance.assistants.all():
            Enrollment.objects.update_or_create(
                course_instance_id=instance.id,
                user_profile_id=assistant.id,
                defaults={
                    'role': Enrollment.ENROLLMENT_ROLE.ASSISTANT,
                    'status': Enrollment.ENROLLMENT_STATUS.ACTIVE,
                },
            )


def create_teacher_enrollments(apps, schema_editor):
    Course = apps.get_model('course', 'Course')
    for course in Course.objects.prefetch_related('instances', 'teachers'):
        for instance in course.instances.all():
            for teacher in course.teachers.all():
                Enrollment.objects.update_or_create(
                    course_instance_id=instance.id,
                    user_profile_id=teacher.id,
                    defaults={
                        'role': Enrollment.ENROLLMENT_ROLE.TEACHER,
                        'status': Enrollment.ENROLLMENT_STATUS.ACTIVE,
                    },
                )


def reverse_create_assistant_enrollments(apps, schema_editor):
    CourseInstance = apps.get_model('course', 'CourseInstance')
    UserProfile = apps.get_model('userprofile', 'UserProfile')
    for enrollment in Enrollment.objects.filter(
        role=Enrollment.ENROLLMENT_ROLE.ASSISTANT,
        status=Enrollment.ENROLLMENT_STATUS.ACTIVE
    ):
        instance = CourseInstance.objects.get(id=enrollment.course_instance.id)
        profile = UserProfile.objects.get(id=enrollment.user_profile.id)
        instance.assistants.add(profile)


def reverse_create_teacher_enrollments(apps, schema_editor):
    CourseInstance = apps.get_model('course', 'CourseInstance')
    UserProfile = apps.get_model('userprofile', 'UserProfile')
    for enrollment in Enrollment.objects.filter(
        role=Enrollment.ENROLLMENT_ROLE.TEACHER,
        status=Enrollment.ENROLLMENT_STATUS.ACTIVE
    ):
        instance = CourseInstance.objects.get(id=enrollment.course_instance.id)
        profile = UserProfile.objects.get(id=enrollment.user_profile.id)
        instance.course.teachers.add(profile)


class Migration(migrations.Migration):

    dependencies = [
        ('course', '0049_auto_20210701_1730'),
        ('userprofile', '0005_userprofile_organization'),
    ]

    operations = [
        migrations.AddField(
            model_name='enrollment',
            name='role',
            field=models.IntegerField(choices=[(1, 'STUDENT'), (2, 'ASSISTANT'), (3, 'TEACHER')], default=1),
        ),
        migrations.AddField(
            model_name='enrollment',
            name='status',
            field=models.IntegerField(choices=[(1, 'ACTIVE'), (2, 'REMOVED'), (3, 'BANNED')], default=1),
        ),
        migrations.RunPython(update_enrollments, migrations.RunPython.noop),
        migrations.RunPython(create_assistant_enrollments, reverse_create_assistant_enrollments),
        migrations.RunPython(create_teacher_enrollments, reverse_create_teacher_enrollments),
        migrations.RemoveField(
            model_name='course',
            name='teachers',
        ),
        migrations.RemoveField(
            model_name='courseinstance',
            name='assistants',
        ),
        migrations.RemoveField(
            model_name='courseinstance',
            name='students',
        ),
    ]
